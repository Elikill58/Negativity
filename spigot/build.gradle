import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

import java.nio.file.Paths

plugins {
    id 'com.github.johnrengelman.shadow'
}

sourceSets {
    main {
        java.srcDirs = ['src']
        resources.srcDirs = ['resources']
    }
    spigot17 {
        java.srcDir 'spigot17'
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

configurations {
    spigot
    compileClasspath.extendsFrom spigot
    reobfMap
    specialSource
}

repositories {
    maven {
        name 'sonatype'
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'spigot'
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    mavenLocal {
        metadataSources {
            mavenPom()
            artifact()
        }
        content {
            includeGroup('org.spigotmc')
        }
    }
}

dependencies {
    api project(':common')
    implementation 'org.bstats:bstats-bukkit:1.7'
    compileOnly 'com.comphenix.protocol:ProtocolLib:4.5.0'

    spigot17CompileOnly sourceSets.main.output
    spigot17CompileOnly 'org.spigotmc:spigot:1.17-R0.1-SNAPSHOT:remapped-mojang'
    spigot fileTree(dir: "spigotJars", includes: ['*.jar'])

    reobfMap group: 'org.spigotmc', name: 'minecraft-server', version: '1.17-R0.1-SNAPSHOT', classifier: 'maps-mojang', ext: 'txt'
    specialSource 'net.md-5:SpecialSource:1.10.0'
}

processResources {
    def props = [version: version]
    inputs.properties(props)
    // Do not try to expand service files, they may contain a dollar sign to mark inner classes
    filesNotMatching('META-INF/services/*') {
        expand(props)
    }
}

compileSpigot17Java.javaCompiler.set(
        javaToolchains.compilerFor { languageVersion = JavaLanguageVersion.of(16) }
)

compileJava.javaCompiler.set(
        javaToolchains.compilerFor { languageVersion = JavaLanguageVersion.of(8) }
)

shadowJar {
    archiveBaseName.set('negativity')
    archiveAppendix.set('spigot')
    archiveClassifier.set(null)

    relocate('org.bstats', 'com.elikill58.negativity')

    mergeServiceFiles()
    from(project(':common').tasks.shadowJar,
            sourceSets.spigot17.output,
            project('integrations:essentials').jar.outputs.files,
            project('integrations:floodgate').jar.outputs.files,
            project('integrations:gadgetsmenu').jar.outputs.files,
            project('integrations:maxbans').jar.outputs.files,
            project('integrations:protocolsupport').jar.outputs.files,
            project('integrations:worldguard').jar.outputs.files
    )
}

task reobfSpigotPlugin(type: JavaExec) {
    dependsOn(shadowJar)

    classpath += configurations.specialSource
    main 'net.md_5.specialsource.SpecialSource'

    workingDir file(Paths.get('build', 'tmp', name))
    workingDir.mkdirs()

    File mapFile = configurations.reobfMap.singleFile
    File inputFile = shadowJar.outputs.files.singleFile
    inputs.files(mapFile, inputFile)

    String outputPath = inputFile.absolutePath.replace('.jar', '-obf.jar')
    outputs.file(outputPath)

    args '-i', inputFile, '-o', outputPath, '-m', mapFile, '--reverse'
}

build.dependsOn reobfSpigotPlugin

parent.tasks.named('shadowJar', ShadowJar) {
    it.from(reobfSpigotPlugin.outputs)
}

task prepareServer(type: Copy) {
    from reobfSpigotPlugin
    rename { 'negativity.jar' }
    def pluginDir = System.getProperty('plugins.dir')
    if (pluginDir == null) {
        enabled(false)
    } else {
        into pluginDir
    }
}

subprojects {
    repositories {
        mavenLocal {
            metadataSources {
                mavenPom()
                artifact()
            }
            content {
                includeGroup('org.spigotmc')
            }
        }
    }
    java.toolchain.languageVersion = JavaLanguageVersion.of(8)
}
