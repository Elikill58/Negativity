/* Generated By:JavaCC: Do not edit this line. SyntaxCheckerConstants.java */
package org.mariuszgromada.math.mxparser.syntaxchecker;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface SyntaxCheckerConstants {

	/** RegularExpression Id. */
	int LEFT_PAR = 46;
	/** RegularExpression Id. */
	int RIGHT_PAR = 47;
	/** RegularExpression Id. */
	int PLUS = 48;
	/** RegularExpression Id. */
	int MINUS = 49;
	/** RegularExpression Id. */
	int MULTIPLY = 50;
	/** RegularExpression Id. */
	int DIV = 51;
	/** RegularExpression Id. */
	int POWER = 52;
	/** RegularExpression Id. */
	int TETRATION = 53;
	/** RegularExpression Id. */
	int MODULO = 54;
	/** RegularExpression Id. */
	int FACTORIAL = 55;
	/** RegularExpression Id. */
	int PERCENTAGE = 56;
	/** RegularExpression Id. */
	int COMMA = 57;
	/** RegularExpression Id. */
	int SEMICOLON = 58;
	/** RegularExpression Id. */
	int EQ = 59;
	/** RegularExpression Id. */
	int UNIT = 60;
	/** RegularExpression Id. */
	int NEQ = 61;
	/** RegularExpression Id. */
	int LT = 62;
	/** RegularExpression Id. */
	int LEQ = 63;
	/** RegularExpression Id. */
	int GT = 64;
	/** RegularExpression Id. */
	int GEQ = 65;
	/** RegularExpression Id. */
	int OR = 66;
	/** RegularExpression Id. */
	int AND = 67;
	/** RegularExpression Id. */
	int NOT = 68;
	/** RegularExpression Id. */
	int BITNOT = 69;
	/** RegularExpression Id. */
	int IMP = 70;
	/** RegularExpression Id. */
	int CIMP = 71;
	/** RegularExpression Id. */
	int NIMP = 72;
	/** RegularExpression Id. */
	int CNIMP = 73;
	/** RegularExpression Id. */
	int NAND = 74;
	/** RegularExpression Id. */
	int EQV = 75;
	/** RegularExpression Id. */
	int NOR = 76;
	/** RegularExpression Id. */
	int BITWISE = 77;
	/** RegularExpression Id. */
	int XOR = 78;
	/** RegularExpression Id. */
	int CHAR = 79;

	/** RegularExpression Id. */
	int DECIMAL = 82;
	/** RegularExpression Id. */
	int BASE1 = 83;
	/** RegularExpression Id. */
	int BASE2 = 84;
	/** RegularExpression Id. */
	int BASE3 = 85;
	/** RegularExpression Id. */
	int BASE4 = 86;
	/** RegularExpression Id. */
	int BASE5 = 87;
	/** RegularExpression Id. */
	int BASE6 = 88;
	/** RegularExpression Id. */
	int BASE7 = 89;
	/** RegularExpression Id. */
	int BASE8 = 90;
	/** RegularExpression Id. */
	int BASE9 = 91;
	/** RegularExpression Id. */
	int BASE10 = 92;
	/** RegularExpression Id. */
	int BASE11 = 93;
	/** RegularExpression Id. */
	int BASE12 = 94;
	/** RegularExpression Id. */
	int BASE13 = 95;
	/** RegularExpression Id. */
	int BASE14 = 96;
	/** RegularExpression Id. */
	int BASE15 = 97;
	/** RegularExpression Id. */
	int BASE16 = 98;
	/** RegularExpression Id. */
	int BASE17 = 99;
	/** RegularExpression Id. */
	int BASE18 = 100;
	/** RegularExpression Id. */
	int BASE19 = 101;
	/** RegularExpression Id. */
	int BASE20 = 102;
	/** RegularExpression Id. */
	int BASE21 = 103;
	/** RegularExpression Id. */
	int BASE22 = 104;
	/** RegularExpression Id. */
	int BASE23 = 105;
	/** RegularExpression Id. */
	int BASE24 = 106;
	/** RegularExpression Id. */
	int BASE25 = 107;
	/** RegularExpression Id. */
	int BASE26 = 108;
	/** RegularExpression Id. */
	int BASE27 = 109;
	/** RegularExpression Id. */
	int BASE28 = 110;
	/** RegularExpression Id. */
	int BASE29 = 111;
	/** RegularExpression Id. */
	int BASE30 = 112;
	/** RegularExpression Id. */
	int BASE31 = 113;
	/** RegularExpression Id. */
	int BASE32 = 114;
	/** RegularExpression Id. */
	int BASE33 = 115;
	/** RegularExpression Id. */
	int BASE34 = 116;
	/** RegularExpression Id. */
	int BASE35 = 117;
	/** RegularExpression Id. */
	int BASE36 = 118;
	/** RegularExpression Id. */
	int BINARY = 119;
	/** RegularExpression Id. */
	int OCTAL = 120;
	/** RegularExpression Id. */
	int HEXADECIMAL = 121;
	/** RegularExpression Id. */
	int FRACTION = 122;
	/** RegularExpression Id. */
	int IDENTIFIER = 123;
	/** RegularExpression Id. */
	int FUNCTION = 124;

}
