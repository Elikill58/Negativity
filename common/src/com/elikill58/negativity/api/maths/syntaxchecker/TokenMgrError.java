/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 6.0 */
/* JavaCCOptions: */
package com.elikill58.negativity.api.maths.syntaxchecker;

/** Token Manager Error. */
public class TokenMgrError extends Error {

	/**
	 * The version identifier for this Serializable class. Increment only if the
	 * <i>serialized</i> form of the class changes.
	 */
	private static final long serialVersionUID = 1L;

	/*
	 * Ordinals for various reasons why an Error of this type can be thrown.
	 */

	/**
	 * Lexical error occurred.
	 */
	static final int LEXICAL_ERROR = 0;

	/**
	 * Replaces unprintable characters by their escaped (or unicode escaped)
	 * equivalents in the given string
	 * 
	 * @param str string to add espace
	 * 
	 * @return the string with escapes if needed
	 */
	protected static final String addEscapes(String str) {
		StringBuffer retval = new StringBuffer();
		char ch;
		for (int i = 0; i < str.length(); i++) {
			switch (str.charAt(i)) {
			case 0:
				continue;
			case '\b':
				retval.append("\\b");
				continue;
			case '\t':
				retval.append("\\t");
				continue;
			case '\n':
				retval.append("\\n");
				continue;
			case '\f':
				retval.append("\\f");
				continue;
			case '\r':
				retval.append("\\r");
				continue;
			case '\"':
				retval.append("\\\"");
				continue;
			case '\'':
				retval.append("\\\'");
				continue;
			case '\\':
				retval.append("\\\\");
				continue;
			default:
				if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
					String s = "0000" + Integer.toString(ch, 16);
					retval.append("\\u" + s.substring(s.length() - 4, s.length()));
				} else {
					retval.append(ch);
				}
				continue;
			}
		}
		return retval.toString();
	}

	/**
	 * Returns a detailed message for the Error when it is thrown by the token
	 * manager to indicate a lexical error.<br>
	 * Note: You can customize the lexical error message by modifying this method.
	 * 
	 * @param EOFSeen indicates if EOF caused the lexical
	 * @param lexState lexical state in which this error occurred
	 * @param errorLine line number when the error occurred
	 * @param errorColumn column number when the error occurred
	 * @param errorAfter prefix that was seen before this error occurred
	 * @param curChar the offending character
	 * @return the lexical error
	 */
	protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn,
			String errorAfter, char curChar) {
		return ("Lexical error at line " + errorLine + ", column " + errorColumn + ".  Encountered: "
				+ (EOFSeen ? "<EOF> "
						: ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int) curChar + "), ")
				+ "after : \"" + addEscapes(errorAfter) + "\"");
	}

	/**
	 * You can also modify the body of this method to customize your error messages.
	 * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not of
	 * end-users concern, so you can return something like :
	 *
	 * "Internal Error : Please file a bug report .... "
	 *
	 * from this method for such cases in the release version of your parser.
	 * 
	 * @return this message
	 */
	@Override
	public String getMessage() {
		return super.getMessage();
	}

	/*
	 * Constructors of various flavors follow.
	 */

	/** No arg constructor. */
	public TokenMgrError() {
	}

	public TokenMgrError(String message, int reason) {
		super(message);
	}


	/**
	 * Returns a detailed message for the Error when it is thrown by the token
	 * manager to indicate a lexical error.<br>
	 * Note: You can customize the lexical error message by modifying this method.
	 * 
	 * @param EOFSeen indicates if EOF caused the lexical
	 * @param lexState lexical state in which this error occurred
	 * @param errorLine line number when the error occurred
	 * @param errorColumn column number when the error occurred
	 * @param errorAfter prefix that was seen before this error occurred
	 * @param curChar the offending character
	 * @param reason the reason of this error
	 */
	public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar,
			int reason) {
		this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
	}
}
/*
 * JavaCC - OriginalChecksum=2277c35f96b7ba9481c5d95508abca6b (do not edit this
 * line)
 */
